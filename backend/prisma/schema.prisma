generator client {
  provider = "prisma-client-py"
  interface = "sync"
  recursive_type_depth = -1
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ConversationRole {
  student
  assistant
}

enum SessionStatus {
  created
  processing
  completed
}

model Student {
  id         String       @id @default(cuid())
  name       String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  sessions   Session[]
}

model Session {
  id           String            @id @default(cuid())
  studentId    String
  slideCount   Int?
  pdfUrl       String?
  status       SessionStatus?
  createdAt    DateTime       @default(now())
  completedAt  DateTime?

  student      Student        @relation(fields: [studentId], references: [id], onDelete: Cascade)
  conversations Conversation[]
  feedback      Feedback?

  @@index([studentId], map: "idx_session_studentId")
  @@index([status], map: "idx_session_status")
}

model Conversation {
  id          String       @id @default(cuid())
  sessionId   String
  role        ConversationRole
  content     String
  slideNumber Int?
  timestamp   DateTime
  createdAt   DateTime  @default(now())

  session     Session   @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@index([sessionId], map: "idx_conversation_sessionId")
  @@index([sessionId, timestamp], map: "idx_conversation_sessionId_timestamp") // ‚Üê for chronological reads
}

model Feedback {
  id                 String       @id @default(cuid())
  sessionId          String       @unique
  slideFeedback      String?   // optional blob of per-slide notes
  overallFeedback    String?
  presentationScore  Int?
  strengths          String?
  improvements       String?
  viewedByProfessor  Boolean   @default(false)
  viewedAt           DateTime?
  createdAt          DateTime  @default(now())

  session            Session   @relation(fields: [sessionId], references: [id], onDelete: Cascade)
}
